@using BlazorEdgeNewTab.Constants
<div class="dropdown">
    <button class="dropdown-toggle TopMenuIconStyle btn" type="button" id="settingsDropDown" data-bs-toggle="dropdown" aria-expanded="false" title="Settings">
        <img src="\icons\fluent_gear.png" alt="waffle icon">
    </button>
    <div class="dropdown-menu p-4 text-muted M365PopUp" style="min-width: 450px" aria-labelledby="settingsDropDown">
        <form class="mb-3">
            <h4>Settings</h4>
            <EditForm Model="this">
                <div class="form-check form-switch">
                    <InputCheckbox @bind-Value="@QuickLinksVisible" Id="showQuickLinksSwitch" class="form-check-input"/>
                    <label class="form-check-label" for="showQuickLinksSwitch">Show Quick Links</label>
                </div>
                <br/>
                <div class="form-check form-switch">
                    <InputCheckbox @bind-Value="@SearchVisible" Id="showSearchSwitch" class="form-check-input"/>
                    <label class="form-control-label" for="showSearchSwitch">Show Web Search</label>
                </div>
                <br/>
                <label class="form-control-label">Quick Links Bookmark Folder</label>
                <br/>
                <label>(sub folders are ignored)</label>
                <div class="form-text">
                    <InputText @bind-Value="QuickLinksFolder" class="form-control"></InputText>
                </div>
                <div>
                    <button class="btn btn-primary" @onclick="ResetSettings">Reset Settings</button>
                </div>
            </EditForm>
        </form>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback OnQuickLinksFolderChangedCallBack { get; set; }
    [Parameter]
    public EventCallback OnQuickLinksVisibleChangedCallBack { get; set; }
    [Parameter]
    public EventCallback OnSearchVisibleChangedCallBack { get; set; }

    private bool _quickLinksVisible { get; set; }
    public bool QuickLinksVisible
    {
        get => _quickLinksVisible;
        set
        {
            if (value == _quickLinksVisible) return;
            Console.WriteLine($"Setting show quick links to {value}");
            _quickLinksVisible = value;
            Settings.UpdateSetting(SettingsValues.ShowQuickLinks, value);
            Settings.SaveAsync();
            OnQuickLinksVisibleChangedCallBack.InvokeAsync();
        }
    }
    private bool _searchVisible { get; set; }
    public bool SearchVisible
    {
        get => _searchVisible;
        set
        {
            if (value == _searchVisible) return;
            Console.WriteLine($"Setting search visible to {value}");
            _searchVisible = value;
            Settings.UpdateSetting(SettingsValues.ShowWebSearch, value);
            Settings.SaveAsync();
            OnSearchVisibleChangedCallBack.InvokeAsync();
        }
    }
    public string QuickLinksFolder
    {
        get => Settings.GetSettingValue(SettingsValues.QuickLinkBookMarkFolder);
        set
        {
            var currentFolderName = Settings.GetSettingValue(SettingsValues.QuickLinkBookMarkFolder);
            if (string.IsNullOrWhiteSpace(value) || currentFolderName == value) return;
            Console.WriteLine($"Setting QuickLinks Folder To {value}");
            Settings.UpdateSetting(SettingsValues.QuickLinkBookMarkFolder, value);
            Settings.SaveAsync();
            OnQuickLinksFolderChangedCallBack.InvokeAsync();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        QuickLinksVisible = Convert.ToBoolean(Settings.GetSettingValue(SettingsValues.ShowQuickLinks));
        SearchVisible = Convert.ToBoolean(Settings.GetSettingValue(SettingsValues.ShowWebSearch));
        base.OnAfterRender(firstRender);
    }

    private void ResetSettings()
    {
        Settings.ResetSettings();
        Settings.SaveAsync();
    }

}