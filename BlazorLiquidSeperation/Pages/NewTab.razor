@page "/newtab.html"
@using BlazorLiquidSeperation.Models
@using BlazorLiquidSeperation.Constants
@inherits BasePage;
@inject IJSRuntime JS;

<div class="container-fluid" xmlns="http://www.w3.org/1999/html">
    <div class="row" style="height: 150px">
        <div class="col">
            <div class="dropdown">
                <button class="dropdown-toggle TopMenuIconStyle btn" type="button" id="waffleDropDown" data-bs-toggle="dropdown" aria-expanded="false">
                    <img src="\icons\fluent_square_menu.png" alt="waffle icon">
                </button>
                <div class="dropdown-menu p-4 text-muted M365PopUp" style="min-width: 350px" aria-labelledby="waffleDropDown">
                    <MS635Menu></MS635Menu>
                </div>
            </div>
        </div>
        <div class="col-5"></div>
        <div class="col-1">
            <div>
                <a href="https://rewards.microsoft.com/?FORM=ANNRW1&redref=amc" class="TopMenuIconStyle btn">
                    <img src=".\icons\fluent_medal.png" alt="Click for Microsoft Rewards" class="TopMenuRewardsStyle">
                </a>
            </div>
        </div>
        <div class="col-1">
            <div class="dropdown">
                <button class="dropdown-toggle TopMenuIconStyle btn" type="button" id="settingsDropDown" data-bs-toggle="dropdown" aria-expanded="false">
                    <img src="\icons\fluent_gear.png" alt="waffle icon">
                </button>
                <div class="dropdown-menu p-4 text-muted M365PopUp" style="min-width: 350px" aria-labelledby="settingsDropDown">
                    <form class="mb-3">
                        <h4>Settings</h4>
                        <EditForm Model="this">
                            <div class="custom-control custom-switch">
                                <InputCheckbox @bind-Value="@QuickLinksVisible" Id="showQuickLinksSwitch" class="custom-control-input"/>
                                <label class="custom-control-label" for="showQuickLinksSwitch">Show Quick Link</label>
                            </div>
                            <br/>
                            <div class="custom-control custom-switch">
                                <InputCheckbox @bind-Value="@SearchVisible" Id="showSearchSwitch" class="custom-control-input"/>
                                <label class="custom-control-label" for="showSearchSwitch">Show Web Search</label>
                            </div>
                            <br/>
                        </EditForm>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="height: 200px">
        <div class="col" style="width: 15px"></div>
        <div class="col-6">
            <form @onsubmit="Enter" class="SearchBoxOuterDivStyle" hidden="@(!SearchVisible)">
                <div class="input-group mb-3 SearchBoxFormStyle">
                    <input class="form-control SearchBoxStyle" type="text" @bind="SearchQuery" placeholder="Search the web" aria-label="Query" aria-describedby="queryButtonAddon">
                    <button class="btn SearchButtonStyle" type="button" id="queryButtonAddon" @onclick="FireSearchEngineQuery">
                        <img alt="Search Icon" src="./icons/fluent_search.png"/>
                    </button>
                </div>
            </form>
        </div>
        <div class="col" style="width: 15px"></div>
    </div>
    <div class="row" style="height: auto">
        <div class="col">
            <div class="QuickLinkContainer container-fluid" hidden="@(!QuickLinksVisible)">
                @{
                    if (_quickLinks != null)
                    {
                        foreach (var quickLink in _quickLinks)
                        {
                            <button class="QuickLinkContent">
                                <a href="@quickLink.QuickLinkUrl">
                                    <div class="QuickLinkBookMarkImageContainer">
                                        <img src="@quickLink.QuickLinkImageUrl" class="QuickLinkBookMarkImage" alt="@quickLink.QuickLinkTitle"/>
                                    </div>
                                </a>
                                <br>
                                <span class="QuickLinkTitle">@quickLink.QuickLinkTitle</span>
                            </button>
                        }
                    }

                }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-1" style="width: 15px"></div>
        <div class="col-9"></div>
        <div class="col-2">
            <br/>
            <br/>
            <div style="left: 50%; right: 50%;">
                <button class="imageNavigationButtonStyle" @onclick="GetPreviousImage">
                    <img src="icons/fluent_backward.png" height="24px" width="24px" alt="&lt;"/>
                </button>
                <button class="imageNavigationButtonStyle" @onclick="GetNextImage">
                    <img src="icons/fluent_forward.png" height="24px" width="24px" alt="&gt;"/>
                </button>
            </div>
        </div>
        <div class="col-1" style="width: 15px"></div>
    </div>
</div>

@code{

    private List<QuickLink> _quickLinks;
    private List<Image> _bingArchiveImages;
    private BingImageOfTheDay ImageOfTheDay;
    private string SearchQuery { get; set; }
    private bool _quickLinksVisible;
    private HttpClient _httpClient;
    private int imageArchiveIndex = -1;

    public bool QuickLinksVisible
    {
        get => _quickLinksVisible;
        set
        {
            if (value == _quickLinksVisible) return;
            Console.WriteLine($"Setting show quick links to {value}");
            _quickLinksVisible = value;
            Settings.UpdateSetting(StatValues.ShowQuickLinks, value);
            Settings.SaveAsync();
        }
    }

    private bool _searchVisible { get; set; }

    public bool SearchVisible
    {
        get => _searchVisible;
        set
        {
            if (value == _searchVisible) return;
            Console.WriteLine($"Setting search visible to {value}");
            _searchVisible = value;
            Settings.UpdateSetting(StatValues.ShowWebSearch, value);
            Settings.SaveAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
    //NOTE - Do NOT get settings until the quick links are set up. The elements need to exist in the dom first or the
    //QuickLinksVisible property will cause a nasty exception because it's trying to work on an HTML element that isn't drawn yet.
        await Settings.LoadSettingsAsync(WebExtensions).ContinueWith(_ => SetUpQuickLinks());
        QuickLinksVisible = Convert.ToBoolean(Settings.GetSettingValue(StatValues.ShowQuickLinks));
        SearchVisible = Convert.ToBoolean(Settings.GetSettingValue(StatValues.ShowWebSearch));
    }

    private async Task SetUpQuickLinks()
    {
        _quickLinks = new List<QuickLink>();
        Console.WriteLine($"{Settings.GetSettingValue(StatValues.QuickLinkBookMarkFolder)}");
        var bookMarkNode = await WebExtensions.Bookmarks.Search(Settings.GetSettingValue(StatValues.QuickLinkBookMarkFolder));
        if (bookMarkNode == null) return;
        Console.WriteLine($"Got a bookmark node with count: {bookMarkNode.Count()}");
        var quickLinkBookMarks = await WebExtensions.Bookmarks.GetChildren(bookMarkNode.First().Id);
        _quickLinks.AddRange(quickLinkBookMarks.Select(quickLinkBookMark => new QuickLink
        {
            QuickLinkTitle = quickLinkBookMark.Title, QuickLinkImageUrl = "chrome://favicon/size/64/" + quickLinkBookMark.Url, QuickLinkUrl = quickLinkBookMark.Url
        }));
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetBingImage();
            await GetBingImageArchive();
        }
        await base.OnAfterRenderAsync(firstRender).ConfigureAwait(false);
    }

    private async Task GetBingImage()
    {
        try
        {
            Console.WriteLine("Getting Bing Image 🔍");
            var bingImageOfTheDayUrl = "https://api.allorigins.win/raw?url=https%3A//www.bing.com/HPImageArchive.aspx%3Fformat%3Djs%26idx%3D0%26n%3D1%26mkt%3Den-US";
            Console.WriteLine($"Querying bing image of the day API with the following URL: {bingImageOfTheDayUrl}");
            _httpClient ??= new HttpClient();
            var dto = await _httpClient.GetFromJsonAsync<BingImageOfTheDayDto>(bingImageOfTheDayUrl);
            if (dto != null)
            {
                ImageOfTheDay = dto.images[0];
                if (ImageOfTheDay != null)
                {
                    await SetBackgroundImage(ImageOfTheDay.url);
                }
                else
                {
                    Console.WriteLine("We did not set the image, there was no first image in the json that came back. ☹");
                }
            }
            else
            {
                Console.WriteLine("The image collection was null, we probably screwed up deserializing the JSON ☹");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("We got an error. 😡");
            Console.WriteLine(e);
        }
    }

    private async Task GetBingImageArchive()
    {
        var dateString = $"{DateTime.Now.Year}{DateTime.Now.Month:00}{DateTime.Now.Day:00}_0700&";
        Console.WriteLine($"Querying bing with date string - {dateString}");
        var bingImageArchiveUrl = $"https://api.allorigins.win/raw?url=https://www.bing.com/hp/api/v1/imagegallery?format=json&ssd={dateString}";
        Console.WriteLine($"Querying bing image archive with the following URL:{bingImageArchiveUrl}");
        _httpClient ??= new HttpClient();
        var dto = await _httpClient.GetFromJsonAsync<BingImageArchiveDto>(bingImageArchiveUrl);
        _bingArchiveImages = dto?.data.images.ToList();
    }

    private async Task GetNextImage()
    {
        Console.WriteLine($"Getting next image 🖼, current image index is: {imageArchiveIndex}");
        if (imageArchiveIndex >= _bingArchiveImages.Count - 1)
        {
            imageArchiveIndex = -1;
            await SetBackgroundImage(ImageOfTheDay.url);
        }
        else
        {
            imageArchiveIndex++;
            await SetBackgroundImage(GetImageUrlForIndex(imageArchiveIndex));
        }
    }

    private async Task GetPreviousImage()
    {
        Console.WriteLine($"Getting previous image 🖼, current image index is: {imageArchiveIndex}");
        if (imageArchiveIndex == -1)
        {
            imageArchiveIndex = _bingArchiveImages.Count - 1;
            await SetBackgroundImage(GetImageUrlForIndex(imageArchiveIndex));
        }
        else if (imageArchiveIndex == 0)
        {
            imageArchiveIndex = -1;
            await SetBackgroundImage(ImageOfTheDay.url);
        }
        else
        {
            imageArchiveIndex--;
            await SetBackgroundImage(GetImageUrlForIndex(imageArchiveIndex));
        }
    }

    private string GetImageUrlForIndex(int index)
    {
        var imageUrls = _bingArchiveImages[index].imageUrls;
        return string.IsNullOrWhiteSpace(imageUrls.landscape.wallpaper) ?
            imageUrls.landscape.highDef : imageUrls.landscape.wallpaper;
    }

    private async Task SetBackgroundImage(string Url)
    {
        var fullImagePath = "https://bing.com" + Url;
        await JS.InvokeVoidAsync("setBackgroundImage1", fullImagePath).ConfigureAwait(false);
        Console.WriteLine("Image set 😊");
    }

    private void Enter()
    {
        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            FireSearchEngineQuery();
        }
    }

    private void FireSearchEngineQuery()
    {
        try
        {
            Console.WriteLine($"Performing a search with query : {SearchQuery}");
    // The code below always throws an exception; we are using JS Interop to work around this for now...
    // var searchProps = new SearchProperties {Query = SearchQuery};
    // await WebExtensions.Search.Search(searchProps);
            JS.InvokeVoidAsync("runSearchQuery", SearchQuery).ConfigureAwait(false);
        }
        catch (Exception e)
        {
            Console.WriteLine("We had an error doing the search query.");
            Console.WriteLine(e);
        }
    }

}