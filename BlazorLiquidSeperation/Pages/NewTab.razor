@page "/newtab.html"
@using BlazorLiquidSeperation.Models
@using System.Text.Json
@using WebExtensions.Net.Storage
@using WebExtensions.Net.Types
@using System.Security.Cryptography.X509Certificates
@using System.Net
@using System.IO
@inherits BasePage;
@inject IJSRuntime JS;

<div class="container-fluid" xmlns="http://www.w3.org/1999/html">
    <div class="row" style="height: 150px">
        <div class="col">
            <div class="dropdown">
                <button class="dropdown-toggle TopMenuIconStyle btn" type="button" id="waffleDropDown" data-bs-toggle="dropdown" aria-expanded="false">
                    <img src="\icons\fluent_square_menu.png" alt="waffle icon">
                </button>
                <div class="dropdown-menu p-4 text-muted" style="min-width: 350px" aria-labelledby="waffleDropDown">
                    <MS635Menu></MS635Menu>
                </div>
            </div>
        </div>
        <div class="col-5"></div>
        <div class="col-1">
            <div>
                <a href="https://rewards.microsoft.com/?FORM=ANNRW1&redref=amc" class="TopMenuIconStyle btn">
                    <img src=".\icons\fluent_medal.png" alt="Click for Microsoft Rewards" class="TopMenuRewardsStyle">
                </a>
            </div>
        </div>
        <div class="col-1">
            <div class="dropdown">
                <button class="dropdown-toggle TopMenuIconStyle btn" type="button" id="settingsDropDown" data-bs-toggle="dropdown" aria-expanded="false">
                    <img src="\icons\fluent_gear.png" alt="waffle icon">
                </button>
                <div class="dropdown-menu p-4 text-muted" style="min-width: 350px" aria-labelledby="settingsDropDown">
                    <form class="mb-3">
                        <h4>Settings</h4>
                        <EditForm Model="this">
                            <div class="custom-control custom-switch">
                                <InputCheckbox @bind-Value="@QuickLinksVisible" Id="showQuickLinksSwitch" class="custom-control-input"/>
                                <label class="custom-control-label" for="showQuickLinksSwitch">Show Quick Link</label>
                            </div>
                            <br/>
                            <div class="custom-control custom-switch">
                                <InputCheckbox @bind-Value="@SearchVisible" Id="showSearchSwitch" class="custom-control-input"/>
                                <label class="custom-control-label" for="showSearchSwitch">Show Web Search</label>
                            </div>
                            <br/>
                        </EditForm>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="height: 200px">
        <div class="col" style="width: 15px"></div>
        <div class="col-6">
            <form @onsubmit="Enter" class="SearchBoxOuterDivStyle" hidden="@(!SearchVisible)">
                <div class="input-group mb-3 SearchBoxFormStyle">
                    <input class="form-control SearchBoxStyle" type="text" @bind="SearchQuery" placeholder="Search the web" aria-label="Query" aria-describedby="queryButtonAddon">
                    <button class="btn SearchButtonStyle" type="button" id="queryButtonAddon" @onclick="FireSearchEngineQuery">
                        <img alt="Search Icon" src="./icons/fluent_search.png"/>
                    </button>
                </div>
            </form>
        </div>
        <div class="col" style="width: 15px"></div>
    </div>
    <div class="row" style="height: auto">
        <div class="col">
            <div class="QuickLinkContainer container-fluid" hidden="@(!QuickLinksVisible)">
                @{
                    if (_quickLinks == null) return;
    {
        foreach (var quickLink in _quickLinks)
        {
            <button class="QuickLinkContent">
                <a href="@quickLink.QuickLinkUrl">
                    <div class="QuickLinkBookMarkImageContainer">
                        <img src="@quickLink.QuickLinkImageUrl" class="QuickLinkBookMarkImage" alt="@quickLink.QuickLinkTitle"/>
                    </div>
                </a>
                <br>
                <span class="QuickLinkTitle">@quickLink.QuickLinkTitle</span>
            </button>
        }
    }
                }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-1" style="width: 15px"></div>
        <div class="col-4"></div>
        <div class="col-1" style="width: 15px"></div>
    </div>
</div>

@code{

    private List<QuickLink> _quickLinks;
    private string SearchQuery { get; set; }
    private bool _quickLinksVisible;
    public bool QuickLinksVisible
    {
        get => _quickLinksVisible;
        set
        {
            if (value == _quickLinksVisible) return;
            Console.WriteLine($"Setting show quick links to {value}");
            _quickLinksVisible = value;
            Settings.UpdateSetting(Settings.ShowQuickLinks, value);
            Settings.SaveAsync();
        }
    }

    private bool _searchVisible { get; set; }
    public bool SearchVisible { get => _searchVisible; 
        set
        {
            if (value == _searchVisible) return;
            Console.WriteLine($"Setting search visible to {value}");
            _searchVisible = value;
            Settings.UpdateSetting(Settings.ShowWebSearch, value);
            Settings.SaveAsync();
        } 
    }

    protected override async Task OnInitializedAsync()
    {
        //NOTE - Do NOT get settings until the quick links are set up. The elements need to exist in the dom first or the 
        //QuickLinksVisible property will cause a nasty exception because it's trying to work on an HTML element that isn't drawn yet.
        await SetUpQuickLinks();
        await GetSettings();
    }

    private async Task SetUpQuickLinks(string bookMarkFolderName = Settings.DefualtBookmarkFolderName)
    {
        _quickLinks = new List<QuickLink>();
        var bookMarkNode = await WebExtensions.Bookmarks.Search(bookMarkFolderName);
        if (bookMarkNode == null) return;
        Console.WriteLine($"Got a bookmark node with count: {bookMarkNode.Count()}");
        var quickLinkBookMarks = await WebExtensions.Bookmarks.GetChildren(bookMarkNode.First().Id);
        _quickLinks.AddRange(quickLinkBookMarks.Select(quickLinkBookMark => new QuickLink
        {
            QuickLinkTitle = quickLinkBookMark.Title, QuickLinkImageUrl = "chrome://favicon/size/64/" + quickLinkBookMark.Url, QuickLinkUrl = quickLinkBookMark.Url
        }));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetBingImage();
        }
        await base.OnAfterRenderAsync(firstRender).ConfigureAwait(false);
    }

    private async Task GetBingImage()
    {
        try
        {
            Console.WriteLine("Getting Bing Image 🔍");
            var dateString = $"{DateTime.Now.Year}{DateTime.Now.Month:00}{DateTime.Now.Day:00}_0700&";
            Console.WriteLine($"Querying bing with date string - {dateString}");
            var bingUrl = $"https://api.allorigins.win/raw?url=https://www.bing.com/hp/api/v1/imagegallery?format=json&ssd={dateString}";
            Console.WriteLine($"Querying bing with the following URL:{bingUrl}");
            var httpClient = new HttpClient();
            var dto = await httpClient.GetFromJsonAsync<BingImageDto>(bingUrl);
            if (dto != null)
            {
                var firstImage = dto.data.images.FirstOrDefault();
                if (firstImage != null)
                {
                    var fullImagePath = "https://bing.com" + firstImage.imageUrls.landscape.wallpaper;
                    await JS.InvokeVoidAsync("setBackgroundImage1", fullImagePath).ConfigureAwait(false);
                    Console.WriteLine("Image set 😊");
                }
                else
                {
                    Console.WriteLine("We did not set the image, there was no first image in the json that came back. ☹");
                }
            }
            else
            {
                Console.WriteLine("The image collection was null, we probably screwed up deserializing the JSON ☹");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("We got an error. 😡");
            Console.WriteLine(e);
        }
    }

    private void Enter()
    {
        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            FireSearchEngineQuery();
        }
    }

    private void FireSearchEngineQuery()
    {
        try
        {
            Console.WriteLine($"Performing a search with query : {SearchQuery}");
            // The code below always throws an exception; we are using JS Interop to work around this for now...
            // var searchProps = new SearchProperties {Query = SearchQuery};
            // await WebExtensions.Search.Search(searchProps);
            JS.InvokeVoidAsync("runSearchQuery", SearchQuery).ConfigureAwait(false);
        }
        catch (Exception e)
        {
            Console.WriteLine("We had an error doing the search query.");
            Console.WriteLine(e);
        }
    }

    private async Task GetSettings()
    {
        Console.WriteLine("Getting settings...");
        Settings.Storage ??= await WebExtensions.Storage.GetSync();
        var jsonElement = await Settings.Storage.Get(Settings.StorageKeys);
        var dictionary = JsonSerializer.Deserialize<Dictionary<string, string>>(jsonElement.GetRawText());
        if (dictionary?.FirstOrDefault(pair => pair.Key == Settings.ShowWebSearch ).Key != null)
        {
            Console.WriteLine("Settings found");
            QuickLinksVisible = Convert.ToBoolean(dictionary[Settings.ShowQuickLinks]);
            SearchVisible = Convert.ToBoolean(dictionary[Settings.ShowWebSearch]);
            Settings.UpdateDictionary(dictionary);

        }
        else
        {     
            Console.WriteLine("Settings do not exist exist, setting and saving defaults....");
            await Settings.SaveAsync();
            QuickLinksVisible = Convert.ToBoolean(Settings.GetSettingValue(Settings.ShowQuickLinks));
            SearchVisible = Convert.ToBoolean(Settings.GetSettingValue(Settings.ShowWebSearch));
        }

    }

}