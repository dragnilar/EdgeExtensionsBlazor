@page "/newtab.html"
@using BlazorLiquidSeperation.Models
@using System.Text.Json
@inherits BasePage;
@inject IJSRuntime JS;

<div class="container-fluid" xmlns="http://www.w3.org/1999/html">
    <div class="row" style="height: 150px">
        <div class="col" style="width: 15px"></div>
        <div class="col">
            <div class="dropdown">
                <button class="dropdown-toggle TopMenuIconStyle" type="button" id="waffleDropDown" data-bs-toggle="dropdown" aria-expanded="false">
                    <img src="\icons\fluent_square_menu.png" alt="waffle icon">
                </button>
                <div class="dropdown-menu p-4 text-muted" style="min-width: 400px" aria-labelledby="waffleDropDown">
                    <MS635Menu></MS635Menu>
                </div>
            </div>
        </div>
        <div class="col-5"></div>
        <div class="col-1">
            <div>
                <a href="https://rewards.microsoft.com/?FORM=ANNRW1&redref=amc" class="btn">
                    <img src=".\icons\fluent_medal.png" alt="Click for Microsoft Rewards" class="TopMenuIconStyle">
                </a>
            </div>
        </div>
        <div class="col-1">
            <img src=".\icons\fluent_square_menu.png" />
        </div>
        <div class="col" style="width: 15px"></div>
    </div>
    <div class="row" style="height: 200px">
        <div class="col" style="width: 15px"></div>
        <div class="col-9">
            <div class="container">
                <form style="float: left; width: 75%;">
                    <input class="form-control" type="text" @bind="SearchQuery" @onkeydown="SearchBox_OnKeyDown">
                </form>
                <div style="float: right; width: 25%; height: 100%;">
                    <button class="bg-dark" @onclick="FireSearchEngineQuery">Click to search</button>
                </div>
            </div>
        </div>
        <div class="col" style="width: 15px"></div>
    </div>
    <div class="row" style="height: auto">
        <div class="col">
            <div class="QuickLinkContainer">
                @{
                    if (_quickLinks == null) return;
                    {
                        foreach (var quickLink in _quickLinks)
                        {
                            <button class="QuickLinkContent">
                                <a href="@quickLink.QuickLinkUrl">
                                    <div class="QuickLinkBookMarkImageContainer">
                                        <img src="@quickLink.QuickLinkImageUrl" class="QuickLinkBookMarkImage" alt="@quickLink.QuickLinkTitle"/>
                                    </div>
                                </a>
                                <br>
                                <span class="QuickLinkTitle">@quickLink.QuickLinkTitle</span>
                            </button>
                        }
                    }
                }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-1" style="width: 15px"></div>
        <div class="col-4"></div>
        <div class="col-1" style="width: 15px"></div>
    </div>
</div>
@code{

        private const string EdgeQuickLinksBookmarkName = "Edge Quick Links";
    private List<QuickLink> _quickLinks;
    private string SearchQuery { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _quickLinks = new List<QuickLink>();
        var bookMarkNode = await WebExtensions.Bookmarks.Search(EdgeQuickLinksBookmarkName);
        if (bookMarkNode == null) return;
        Console.WriteLine($"Got a bookmark node with count: {bookMarkNode.Count()}");
        var quickLinkBookMarks = await WebExtensions.Bookmarks.GetChildren(bookMarkNode.First().Id);
        _quickLinks.AddRange(quickLinkBookMarks.Select(quickLinkBookMark => new QuickLink
        {
            QuickLinkTitle = quickLinkBookMark.Title, QuickLinkImageUrl = "chrome://favicon/size/64/" + quickLinkBookMark.Url, QuickLinkUrl = quickLinkBookMark.Url
        }));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetBingImage();
        }
        await base.OnAfterRenderAsync(firstRender).ConfigureAwait(false);
    }

    private async Task GetBingImage()
    {
        try
        {
            Console.WriteLine("Getting Bing Image 🔍");
            var url = "https://peapix.com/bing/feed?country=US";
            var httpClient = new HttpClient();
            var response = await httpClient.GetAsync(url).ConfigureAwait(false);
            var json = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            var images = JsonSerializer.Deserialize<List<BingImage>>(json);
            if (images != null)
            {
                var firstImage = images.FirstOrDefault();
                if (firstImage != null)
                {
                    await JS.InvokeVoidAsync("setBackgroundImage1", firstImage.FullUrl).ConfigureAwait(false);
                    Console.WriteLine("Image set 😊");
                }
                else
                {
                    Console.WriteLine("We did not set the image, there was no first image in the json that came back. ☹");
                }
            }
            else
            {
                Console.WriteLine("The image collection was null, we probably screwed up deserializing the JSON ☹");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("We got an error. 😡");
            Console.WriteLine(e);
        }
    }

    private async Task SearchBox_OnKeyDown(KeyboardEventArgs obj)
    {
        if (obj.Key == "Enter" && !string.IsNullOrWhiteSpace(SearchQuery))
        {
            await FireSearchEngineQuery();
        }
    }

    private async Task FireSearchEngineQuery()
    {
        try
        {
            Console.WriteLine($"Performing a search with query : {SearchQuery}");
    // The code below always throws an exception; we are using JS Interop to work around this for now...
    // var searchProps = new SearchProperties {Query = SearchQuery};
    // await WebExtensions.Search.Search(searchProps);
            await JS.InvokeVoidAsync("runSearchQuery", SearchQuery).ConfigureAwait(false);
        }
        catch (Exception e)
        {
            Console.WriteLine("We had an error doing the search query.");
            Console.WriteLine(e);
        }
    }

}